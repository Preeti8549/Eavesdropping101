def hex2bin(s):
    mp = {'0': "0000",
          '1': "0001",
          '2': "0010",
          '3': "0011",
          '4': "0100",
          '5': "0101",
          '6': "0110",
          '7': "0111",
          '8': "1000",
          '9': "1001",
          'A': "1010",
          'B': "1011",
          'C': "1100",
          'D': "1101",
          'E': "1110",
          'F': "1111"}
    binary = ""
    for i in range(len(s)):
        binary += mp[s[i]]
    return binary

def bin2hex(s):
    mp = {"0000": '0',
          "0001": '1',
          "0010": '2',
          "0011": '3',
          "0100": '4',
          "0101": '5',
          "0110": '6',
          "0111": '7',
          "1000": '8',
          "1001": '9',
          "1010": 'A',
          "1011": 'B',
          "1100": 'C',
          "1101": 'D',
          "1110": 'E',
          "1111": 'F'}
    hexa = ""
    for i in range(0, len(s), 4):
        ch = s[i:i + 4]
        hexa += mp[ch]
    return hexa

def bin2dec(binary):
    decimal = 0
    for i in range(len(binary)):
        decimal = decimal * 2 + int(binary[i])
    return decimal

def dec2bin(decimal):
    binary = bin(decimal)[2:]
    if len(binary) % 4 != 0:
        binary = '0' * (4 - (len(binary) % 4)) + binary
    return binary

def permute(k, arr, n):
    permutation = ""
    for i in range(n):
        permutation += k[arr[i] - 1]
    return permutation

def shift_left(k, nth_shifts):
    return k[nth_shifts:] + k[:nth_shifts]

def xor(a, b):
    result = ""
    for i in range(len(a)):
        if a[i] == b[i]:
            result += "0"
        else:
            result += "1"
    return result

def generate_keys(key):
    key = hex2bin(key)
    keyp = permute(key, keyp_table, 56)
    left = keyp[:28]
    right = keyp[28:]
    round_keys = []
    for i in range(16):
        left = shift_left(left, shift_table[i])
        right = shift_left(right, shift_table[i])
        round_key = permute(left + right, key_comp, 48)
        round_keys.append(round_key)
    return round_keys

def encrypt(pt, round_keys):
    pt = hex2bin(pt)
    pt = permute(pt, initial_perm, 64)
    left = pt[:32]
    right = pt[32:]
    for i in range(16):
        right_expanded = permute(right, exp_d, 48)
        xor_x = xor(right_expanded, round_keys[i])
        op = ""
        for j in range(0, 8):
            row = bin2dec(int(xor_x[j * 6] + xor_x[j * 6 + 5]))
            col = bin2dec(int(xor_x[j * 6 + 1: j * 6 + 5]))
            val = sbox[j][row][col]
            op += dec2bin(val)
        op = permute(op, per, 32)
        xor_x = xor(left, op)
        left = xor_x
        if i != 15:
            left, right = right, left
    cipher = permute(left + right, final_perm, 64)
    return bin2hex(cipher)

# Initial Permutation Table
initial_perm = [58, 50, 42, 34, 26, 18, 10, 2,
                60, 52, 44, 36, 28, 20, 12, 4,
                62, 54, 46, 38, 30, 22, 14, 6,
                64, 56, 48, 40, 32, 24, 16, 8,
                57, 49, 41, 33, 25, 17, 9, 1,
                59, 51, 43, 35, 27, 19, 11, 3,
                61, 53, 45, 37, 29, 21, 13, 5,
                63, 55, 47, 39, 31, 23, 15, 7]

# Expansion D-box Table
exp_d = [32, 1, 2, 3, 4, 5, 4, 5,
         6, 7, 8, 9, 8, 9, 10, 11,
         12, 13, 12, 13, 14, 15, 16, 17,
         16, 17, 18, 19, 20, 21, 20, 21,
         22, 23, 24, 25, 24, 25, 26, 27,
         28, 29, 28, 29, 30, 31, 32, 1]

# Substitution Boxes
sbox = [
    # Box-1
    [
        [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
        [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
        [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
        [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
    ],
    # Box-2
    [
        [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
        [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
        [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
        [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
    ],
    # Box-3
    [
        [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
        [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
        [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
        [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
    ],
    # Box-4
    [
        [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
        [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
        [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
        [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]
    ],
    # Box-5
    [
        [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
        [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
        [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
        [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
    ],
    # Box-6
    [
        [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
        [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
        [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
        [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
    ],
    # Box-7
    [
        [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
        [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
        [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
        [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
    ],
    # Box-8
    [
        [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
        [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
        [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
        [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
    ]
]

# Permutation Table after S-box
per = [16, 7, 20, 21, 29, 12, 28, 17,
       1, 15, 23, 26, 5, 18, 31, 10,
       2, 8, 24, 14, 32, 27, 3, 9,
       19, 13, 30, 6, 22, 11, 4, 25]

# Final Permutation Table
final_perm = [40, 8, 48, 16, 56, 24, 64, 32,
              39, 7, 47, 15, 55, 23, 63, 31,
              38, 6, 46, 14, 54, 22, 62, 30,
              37, 5, 45, 13, 53, 21, 61, 29,
              36, 4, 44, 12, 52, 20, 60, 28,
              35, 3, 43, 11, 51, 19, 59, 27,
              34, 2, 42, 10, 50, 18, 58, 26,
              33, 1, 41, 9, 49, 17, 57, 25]

# Convert binary to hexadecimal
def bin2hex(binary):
    h = hex(int(binary, 2))[2:]
    if len(h) % 2 != 0:
        h = '0' + h
    return h

# Convert hexadecimal to binary
def hex2bin(hexadecimal):
    b = bin(int(hexadecimal, 16))[2:]
    if len(b) % 8 != 0:
        b = '0' * (8 - len(b) % 8) + b
    return b

# Convert binary to decimal
def bin2dec(binary):
    return str(int(binary, 2))

# Convert decimal to binary
def dec2bin(decimal):
    b = bin(decimal)[2:]
    if len(b) != 4:
        b = '0' * (4 - len(b)) + b
    return b

# XOR operation
def xor(a, b):
    result = ''
    for i in range(len(a)):
        result += str(int(a[i]) ^ int(b[i]))
    return result

# Permutation operation
def permute(binary, table, n):
    result = ''
    for i in range(n):
        result += binary[table[i] - 1]
    return result

# Generate round keys
def generate_round_keys(key):
    # Convert key from hexadecimal to binary
    key = hex2bin(key)
    
    # Apply permutation on key
    key = permute(key, initial_key_perm, 64)
    
    # Split key into left and right halves
    left = key[:28]
    right = key[28:]
    
    round_keys = []
    
    for i in range(16):
        # Apply left shift on left and right halves
        left = left[left_shift[i]:] + left[:left_shift[i]]
        right = right[left_shift[i]:] + right[:left_shift[i]]
        
        # Combine left and right halves
        combined = left + right
        
        # Apply permutation on combined key
        round_key = permute(combined, key_perm, 48)
        
        round_keys.append(round_key)
    
    return round_keys

# Encrypt plaintext
def encrypt(plaintext, key):
    # Convert plaintext and key from hexadecimal to binary
    plaintext = hex2bin(plaintext)
    key = hex2bin(key)
    
    # Apply initial permutation on plaintext
    plaintext = permute(plaintext, initial_perm, 64)
    
    # Split plaintext into left and right halves
    left = plaintext[:32]
    right = plaintext[32:]
    
    round_keys = generate_round_keys(key)
    
    for i in range(16):
        # Expand right half
        right_expanded = permute(right, exp_d, 48)
        
        # XOR expanded right half with round key
        xor_x = xor(right_expanded, round_keys[i])
        
        # Apply S-box substitution
        op = ''
        for j in range(0, 48, 6):
            row = int(xor_x[j] + xor_x[j + 5], 2)
            col = int(xor_x[j + 1:j + 5], 2)
            op += dec2bin(s_boxes[j // 6][row][col])
        
        # Apply permutation
        op = permute(op, per, 32)
        
        # XOR left half with permuted output
        xor_x = xor(left, op)
        
        left = right
        right = xor_x
    
    # Combine left and right halves
    combined = right + left
    
    # Apply final permutation
    ciphertext = permute(combined, final_perm, 64)
    
    # Convert ciphertext from binary to hexadecimal
    ciphertext = bin2hex(ciphertext)
    
    return ciphertext

# Example usage
key = "133457799BBCDFF1"  # 64-bit key in hexadecimal
plaintext = "0123456789ABCDEF"  # 64-bit plaintext in hexadecimal

ciphertext = encrypt(plaintext, key)
ciphertext
